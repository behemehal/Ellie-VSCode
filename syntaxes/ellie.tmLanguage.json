{
	"$schema": "http://json-schema.org/schema#",
	"name": "Ellie",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#line_comment"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#sigils"
		},
		{
			"include": "#std_types"
		},
		{
			"match": "\\b(null|true|false)\\b",
			"name": "constant.language.ellie"
		},
		{
			"comment": "Integer literal (decimal)",
			"name": "constant.numeric.integer.decimal.ellie",
			"match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
		},
		{
			"comment": "Function call",
			"match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.ellie"
				}
			}
		},
		{
			"comment": "Function call with type parameters",
			"begin": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*(::)(?=\\s*<.*>\\s*\\()",
			"end": "\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.ellie"
				},
				"2": {
					"name": "keyword.operator.misc.ellie"
				}
			},
			"patterns": [
				{
					"include": "#type_params"
				},
				{
					"include": "#std_types"
				}
			]
		},
		{
			"comment": "Miscellaneous operator",
			"name": "keyword.operator.misc.ellie",
			"match": "(=>|::|\\bas\\b)"
		},
		{
			"comment": "Comparison operator",
			"name": "keyword.operator.comparison.ellie",
			"match": "(&&|\\|\\||==|!=)"
		},
		{
			"comment": "Assignment operator",
			"name": "keyword.operator.assignment.ellie",
			"match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)"
		},
		{
			"comment": "Arithmetic operator",
			"name": "keyword.operator.arithmetic.ellie",
			"match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)"
		},
		{
			"comment": "Comparison operator (second group because of regex precedence)",
			"name": "keyword.operator.comparison.ellie",
			"match": "(<=|>=|<|>)"
		},
		{
			"comment": "Boolean constant",
			"name": "constant.language.boolean.ellie",
			"match": "\\b(true|false)\\b"
		},
		{
			"comment": "Keyword",
			"name": "keyword.other.ellie",
			"match": "\\b(v)\\b"
		},
		{
			"comment": "Integer literal (octal)",
			"name": "constant.numeric.integer.octal.ellie",
			"match": "\\b0b[01_]+(:)+(number)?\\b"
		},
		{
			"comment": "Function definition",
			"begin": "\\b(fn)\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)",
			"end": "[\\{;]",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.fn.ellie"
				},
				"2": {
					"name": "entity.name.function.ellie"
				}
			},
			"patterns": [
				{
					"include": "#type_params"
				},
				{
					"comment": "Function arguments",
					"match": "\bfn\b",
					"name": "keyword.other.fn.ellie",
					"patterns": [
						{
							"include": "#std_types"
						}
					]
				},
				{
					"include": "#std_types"
				}
			]
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.ellie",
				"match": "\\b(if|while|for|return)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.ellie",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ellie",
					"match": "\\\\."
				}
			]
		},
		"type": {
			"comment": "A type",
			"name": "entity.name.type.ellie",
			"match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b"
		},
		"type_params": {
			"comment": "Type parameters",
			"name": "meta.type_params.ellie",
			"begin": "<(?![=<])",
			"end": "(?<![-])>",
			"patterns": [
				{
					"include": "#type_params"
				},
				{
					"include": "#core_types"
				},
				{
					"include": "#line_comment"
				},
				{
					"include": "#sigils"
				},
				{
					"include": "#std_types"
				}
			]
		},
		"core_types": {
			"comment": "Built-in/core type",
			"name": "storage.type.core.ellie",
			"match": "\\b(bool|string|number|void)\\b"
		},
		"line_comment": {
			"comment": "Single-line comment",
			"name": "comment.line.double-slash.ellie",
			"begin": "//",
			"end": "$"
		},
		"string_literal": {
			"comment": "Double-quote string literal",
			"name": "string.quoted.double.ellie",
			"begin": "b?\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#escaped_character"
				}
			]
		},
		"sigils": {
			"comment": "Sigil",
			"name": "keyword.operator.sigil.ellie",
			"match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"]+)"
		},
		"std_types": {
			"comment": "Standard library type",
			"name": "storage.class.std.ellie",
			"match": "\\b(null|any|string|number|float|bool|collective|void)\\b"
		}
	},
	"scopeName": "source.ellie"
}